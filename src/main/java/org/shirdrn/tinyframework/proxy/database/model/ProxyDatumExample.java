package org.shirdrn.tinyframework.proxy.database.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ProxyDatumExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public ProxyDatumExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	protected ProxyDatumExample(ProxyDatumExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table proxy_datum
	 * @ibatorgenerated  Sun Feb 03 16:49:12 CST 2013
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andIdIsNull() {
			addCriterion("ID is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("ID is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("ID =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("ID <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("ID >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("ID >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("ID <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("ID <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("ID in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("ID not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("ID between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("ID not between", value1, value2, "id");
			return this;
		}

		public Criteria andHostIsNull() {
			addCriterion("HOST is null");
			return this;
		}

		public Criteria andHostIsNotNull() {
			addCriterion("HOST is not null");
			return this;
		}

		public Criteria andHostEqualTo(String value) {
			addCriterion("HOST =", value, "host");
			return this;
		}

		public Criteria andHostNotEqualTo(String value) {
			addCriterion("HOST <>", value, "host");
			return this;
		}

		public Criteria andHostGreaterThan(String value) {
			addCriterion("HOST >", value, "host");
			return this;
		}

		public Criteria andHostGreaterThanOrEqualTo(String value) {
			addCriterion("HOST >=", value, "host");
			return this;
		}

		public Criteria andHostLessThan(String value) {
			addCriterion("HOST <", value, "host");
			return this;
		}

		public Criteria andHostLessThanOrEqualTo(String value) {
			addCriterion("HOST <=", value, "host");
			return this;
		}

		public Criteria andHostLike(String value) {
			addCriterion("HOST like", value, "host");
			return this;
		}

		public Criteria andHostNotLike(String value) {
			addCriterion("HOST not like", value, "host");
			return this;
		}

		public Criteria andHostIn(List<String> values) {
			addCriterion("HOST in", values, "host");
			return this;
		}

		public Criteria andHostNotIn(List<String> values) {
			addCriterion("HOST not in", values, "host");
			return this;
		}

		public Criteria andHostBetween(String value1, String value2) {
			addCriterion("HOST between", value1, value2, "host");
			return this;
		}

		public Criteria andHostNotBetween(String value1, String value2) {
			addCriterion("HOST not between", value1, value2, "host");
			return this;
		}

		public Criteria andPortIsNull() {
			addCriterion("PORT is null");
			return this;
		}

		public Criteria andPortIsNotNull() {
			addCriterion("PORT is not null");
			return this;
		}

		public Criteria andPortEqualTo(Integer value) {
			addCriterion("PORT =", value, "port");
			return this;
		}

		public Criteria andPortNotEqualTo(Integer value) {
			addCriterion("PORT <>", value, "port");
			return this;
		}

		public Criteria andPortGreaterThan(Integer value) {
			addCriterion("PORT >", value, "port");
			return this;
		}

		public Criteria andPortGreaterThanOrEqualTo(Integer value) {
			addCriterion("PORT >=", value, "port");
			return this;
		}

		public Criteria andPortLessThan(Integer value) {
			addCriterion("PORT <", value, "port");
			return this;
		}

		public Criteria andPortLessThanOrEqualTo(Integer value) {
			addCriterion("PORT <=", value, "port");
			return this;
		}

		public Criteria andPortIn(List<Integer> values) {
			addCriterion("PORT in", values, "port");
			return this;
		}

		public Criteria andPortNotIn(List<Integer> values) {
			addCriterion("PORT not in", values, "port");
			return this;
		}

		public Criteria andPortBetween(Integer value1, Integer value2) {
			addCriterion("PORT between", value1, value2, "port");
			return this;
		}

		public Criteria andPortNotBetween(Integer value1, Integer value2) {
			addCriterion("PORT not between", value1, value2, "port");
			return this;
		}

		public Criteria andUserIsNull() {
			addCriterion("USER is null");
			return this;
		}

		public Criteria andUserIsNotNull() {
			addCriterion("USER is not null");
			return this;
		}

		public Criteria andUserEqualTo(String value) {
			addCriterion("USER =", value, "user");
			return this;
		}

		public Criteria andUserNotEqualTo(String value) {
			addCriterion("USER <>", value, "user");
			return this;
		}

		public Criteria andUserGreaterThan(String value) {
			addCriterion("USER >", value, "user");
			return this;
		}

		public Criteria andUserGreaterThanOrEqualTo(String value) {
			addCriterion("USER >=", value, "user");
			return this;
		}

		public Criteria andUserLessThan(String value) {
			addCriterion("USER <", value, "user");
			return this;
		}

		public Criteria andUserLessThanOrEqualTo(String value) {
			addCriterion("USER <=", value, "user");
			return this;
		}

		public Criteria andUserLike(String value) {
			addCriterion("USER like", value, "user");
			return this;
		}

		public Criteria andUserNotLike(String value) {
			addCriterion("USER not like", value, "user");
			return this;
		}

		public Criteria andUserIn(List<String> values) {
			addCriterion("USER in", values, "user");
			return this;
		}

		public Criteria andUserNotIn(List<String> values) {
			addCriterion("USER not in", values, "user");
			return this;
		}

		public Criteria andUserBetween(String value1, String value2) {
			addCriterion("USER between", value1, value2, "user");
			return this;
		}

		public Criteria andUserNotBetween(String value1, String value2) {
			addCriterion("USER not between", value1, value2, "user");
			return this;
		}

		public Criteria andPasswordIsNull() {
			addCriterion("PASSWORD is null");
			return this;
		}

		public Criteria andPasswordIsNotNull() {
			addCriterion("PASSWORD is not null");
			return this;
		}

		public Criteria andPasswordEqualTo(String value) {
			addCriterion("PASSWORD =", value, "password");
			return this;
		}

		public Criteria andPasswordNotEqualTo(String value) {
			addCriterion("PASSWORD <>", value, "password");
			return this;
		}

		public Criteria andPasswordGreaterThan(String value) {
			addCriterion("PASSWORD >", value, "password");
			return this;
		}

		public Criteria andPasswordGreaterThanOrEqualTo(String value) {
			addCriterion("PASSWORD >=", value, "password");
			return this;
		}

		public Criteria andPasswordLessThan(String value) {
			addCriterion("PASSWORD <", value, "password");
			return this;
		}

		public Criteria andPasswordLessThanOrEqualTo(String value) {
			addCriterion("PASSWORD <=", value, "password");
			return this;
		}

		public Criteria andPasswordLike(String value) {
			addCriterion("PASSWORD like", value, "password");
			return this;
		}

		public Criteria andPasswordNotLike(String value) {
			addCriterion("PASSWORD not like", value, "password");
			return this;
		}

		public Criteria andPasswordIn(List<String> values) {
			addCriterion("PASSWORD in", values, "password");
			return this;
		}

		public Criteria andPasswordNotIn(List<String> values) {
			addCriterion("PASSWORD not in", values, "password");
			return this;
		}

		public Criteria andPasswordBetween(String value1, String value2) {
			addCriterion("PASSWORD between", value1, value2, "password");
			return this;
		}

		public Criteria andPasswordNotBetween(String value1, String value2) {
			addCriterion("PASSWORD not between", value1, value2, "password");
			return this;
		}

		public Criteria andSuccessCountIsNull() {
			addCriterion("SUCCESS_COUNT is null");
			return this;
		}

		public Criteria andSuccessCountIsNotNull() {
			addCriterion("SUCCESS_COUNT is not null");
			return this;
		}

		public Criteria andSuccessCountEqualTo(Integer value) {
			addCriterion("SUCCESS_COUNT =", value, "successCount");
			return this;
		}

		public Criteria andSuccessCountNotEqualTo(Integer value) {
			addCriterion("SUCCESS_COUNT <>", value, "successCount");
			return this;
		}

		public Criteria andSuccessCountGreaterThan(Integer value) {
			addCriterion("SUCCESS_COUNT >", value, "successCount");
			return this;
		}

		public Criteria andSuccessCountGreaterThanOrEqualTo(Integer value) {
			addCriterion("SUCCESS_COUNT >=", value, "successCount");
			return this;
		}

		public Criteria andSuccessCountLessThan(Integer value) {
			addCriterion("SUCCESS_COUNT <", value, "successCount");
			return this;
		}

		public Criteria andSuccessCountLessThanOrEqualTo(Integer value) {
			addCriterion("SUCCESS_COUNT <=", value, "successCount");
			return this;
		}

		public Criteria andSuccessCountIn(List<Integer> values) {
			addCriterion("SUCCESS_COUNT in", values, "successCount");
			return this;
		}

		public Criteria andSuccessCountNotIn(List<Integer> values) {
			addCriterion("SUCCESS_COUNT not in", values, "successCount");
			return this;
		}

		public Criteria andSuccessCountBetween(Integer value1, Integer value2) {
			addCriterion("SUCCESS_COUNT between", value1, value2,
					"successCount");
			return this;
		}

		public Criteria andSuccessCountNotBetween(Integer value1, Integer value2) {
			addCriterion("SUCCESS_COUNT not between", value1, value2,
					"successCount");
			return this;
		}

		public Criteria andFailureCountIsNull() {
			addCriterion("FAILURE_COUNT is null");
			return this;
		}

		public Criteria andFailureCountIsNotNull() {
			addCriterion("FAILURE_COUNT is not null");
			return this;
		}

		public Criteria andFailureCountEqualTo(Integer value) {
			addCriterion("FAILURE_COUNT =", value, "failureCount");
			return this;
		}

		public Criteria andFailureCountNotEqualTo(Integer value) {
			addCriterion("FAILURE_COUNT <>", value, "failureCount");
			return this;
		}

		public Criteria andFailureCountGreaterThan(Integer value) {
			addCriterion("FAILURE_COUNT >", value, "failureCount");
			return this;
		}

		public Criteria andFailureCountGreaterThanOrEqualTo(Integer value) {
			addCriterion("FAILURE_COUNT >=", value, "failureCount");
			return this;
		}

		public Criteria andFailureCountLessThan(Integer value) {
			addCriterion("FAILURE_COUNT <", value, "failureCount");
			return this;
		}

		public Criteria andFailureCountLessThanOrEqualTo(Integer value) {
			addCriterion("FAILURE_COUNT <=", value, "failureCount");
			return this;
		}

		public Criteria andFailureCountIn(List<Integer> values) {
			addCriterion("FAILURE_COUNT in", values, "failureCount");
			return this;
		}

		public Criteria andFailureCountNotIn(List<Integer> values) {
			addCriterion("FAILURE_COUNT not in", values, "failureCount");
			return this;
		}

		public Criteria andFailureCountBetween(Integer value1, Integer value2) {
			addCriterion("FAILURE_COUNT between", value1, value2,
					"failureCount");
			return this;
		}

		public Criteria andFailureCountNotBetween(Integer value1, Integer value2) {
			addCriterion("FAILURE_COUNT not between", value1, value2,
					"failureCount");
			return this;
		}

		public Criteria andStatusIsNull() {
			addCriterion("STATUS is null");
			return this;
		}

		public Criteria andStatusIsNotNull() {
			addCriterion("STATUS is not null");
			return this;
		}

		public Criteria andStatusEqualTo(Integer value) {
			addCriterion("STATUS =", value, "status");
			return this;
		}

		public Criteria andStatusNotEqualTo(Integer value) {
			addCriterion("STATUS <>", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThan(Integer value) {
			addCriterion("STATUS >", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThanOrEqualTo(Integer value) {
			addCriterion("STATUS >=", value, "status");
			return this;
		}

		public Criteria andStatusLessThan(Integer value) {
			addCriterion("STATUS <", value, "status");
			return this;
		}

		public Criteria andStatusLessThanOrEqualTo(Integer value) {
			addCriterion("STATUS <=", value, "status");
			return this;
		}

		public Criteria andStatusIn(List<Integer> values) {
			addCriterion("STATUS in", values, "status");
			return this;
		}

		public Criteria andStatusNotIn(List<Integer> values) {
			addCriterion("STATUS not in", values, "status");
			return this;
		}

		public Criteria andStatusBetween(Integer value1, Integer value2) {
			addCriterion("STATUS between", value1, value2, "status");
			return this;
		}

		public Criteria andStatusNotBetween(Integer value1, Integer value2) {
			addCriterion("STATUS not between", value1, value2, "status");
			return this;
		}

		public Criteria andCreatedAtIsNull() {
			addCriterion("CREATED_AT is null");
			return this;
		}

		public Criteria andCreatedAtIsNotNull() {
			addCriterion("CREATED_AT is not null");
			return this;
		}

		public Criteria andCreatedAtEqualTo(Date value) {
			addCriterionForJDBCDate("CREATED_AT =", value, "createdAt");
			return this;
		}

		public Criteria andCreatedAtNotEqualTo(Date value) {
			addCriterionForJDBCDate("CREATED_AT <>", value, "createdAt");
			return this;
		}

		public Criteria andCreatedAtGreaterThan(Date value) {
			addCriterionForJDBCDate("CREATED_AT >", value, "createdAt");
			return this;
		}

		public Criteria andCreatedAtGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CREATED_AT >=", value, "createdAt");
			return this;
		}

		public Criteria andCreatedAtLessThan(Date value) {
			addCriterionForJDBCDate("CREATED_AT <", value, "createdAt");
			return this;
		}

		public Criteria andCreatedAtLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CREATED_AT <=", value, "createdAt");
			return this;
		}

		public Criteria andCreatedAtIn(List<Date> values) {
			addCriterionForJDBCDate("CREATED_AT in", values, "createdAt");
			return this;
		}

		public Criteria andCreatedAtNotIn(List<Date> values) {
			addCriterionForJDBCDate("CREATED_AT not in", values, "createdAt");
			return this;
		}

		public Criteria andCreatedAtBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CREATED_AT between", value1, value2,
					"createdAt");
			return this;
		}

		public Criteria andCreatedAtNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CREATED_AT not between", value1, value2,
					"createdAt");
			return this;
		}

		public Criteria andUpdatedAtIsNull() {
			addCriterion("UPDATED_AT is null");
			return this;
		}

		public Criteria andUpdatedAtIsNotNull() {
			addCriterion("UPDATED_AT is not null");
			return this;
		}

		public Criteria andUpdatedAtEqualTo(Date value) {
			addCriterion("UPDATED_AT =", value, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtNotEqualTo(Date value) {
			addCriterion("UPDATED_AT <>", value, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtGreaterThan(Date value) {
			addCriterion("UPDATED_AT >", value, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtGreaterThanOrEqualTo(Date value) {
			addCriterion("UPDATED_AT >=", value, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtLessThan(Date value) {
			addCriterion("UPDATED_AT <", value, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtLessThanOrEqualTo(Date value) {
			addCriterion("UPDATED_AT <=", value, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtIn(List<Date> values) {
			addCriterion("UPDATED_AT in", values, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtNotIn(List<Date> values) {
			addCriterion("UPDATED_AT not in", values, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtBetween(Date value1, Date value2) {
			addCriterion("UPDATED_AT between", value1, value2, "updatedAt");
			return this;
		}

		public Criteria andUpdatedAtNotBetween(Date value1, Date value2) {
			addCriterion("UPDATED_AT not between", value1, value2, "updatedAt");
			return this;
		}
	}
}